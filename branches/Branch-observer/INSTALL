
Installation instructions
-------------------------


Starting with gpsim-0.18.0, two probably not so common packages:

gtk+-extra
eXdbm

are going to be needed. Please see the end of this file for instructions on their installation.


INSTALLATION (the most common way)
----------------------------------

If you've ever installed software under Linux/UNIX before, then this will be completely familiar to you.

1) create a parent subdirectory for gpsim (e.g. gnupic)

$ mkdir ~/gnupic       # choose whatever directory name you like

2) Copy the tar ball to this directory and expand it:

$ cd ~/gnupic
$ mv the_path_of_where_ever_the_tarball_is/gpsim-0.x.y.tar.gz .
$ tar -xvzf gpsim-0.x.y.tar.gz

(Where 'x.y' is the release number.) This will create a subdirectory called gpsim-0.x.y . All of gpsim's source code will be untarred to here.

3) cd gpsim-0.x.y

4) ./configure
This will check your system for the proper tools necessary to build gpsim and then it will create Makefiles.

***NOTE TO HACKERS***

As of version gpsim-0.17.0, gpsim use the GNU Libtool for making shared libraries. This is good in that it helps make gpsim usable on more platforms. It's bad in that it does not create an executable until the 'make install' step. (It instead creates a script after the make step. This script may be invoked the same way gpsim was invoked prior to 0.17.0 .) Consequently, this makes gpsim difficult to debug. If you want to debug gpsim without having to install it, then you can disable the shared libraries feature:

./configure  --disable-shared

5) make all

This will create the executable.

6) su root . You'll need su privileges to complete the install. If you don't have root privileges or don't wish to install gpsim in the /usr/local/bin directory, then see the steps below on building without root privileges.

7) make install
This copies the executable into the /usr/local/bin subdirectory. 




HOW TO BUILD gpsim WITHOUT THE GUI
----------------------------------


Repeat steps 1,2, and 3 from above.

4) ./configure --disable-gui

Note: if you already had built gpsim with the gui support and then decide you want to take it out, then you'll also needed to do a 'make clean' before you do the 'make' in step 5. The make clean will remove all of the old object files.



HOW TO BUILD gpsim WITHOUT ROOT PRIVILEGES
------------------------------------------


If you don't have su privileges, then you can build gpsim and copy it to a directory in your execution path. Please note that you'll need to build gpsim with the shared libraries disabled.

     > # here are the commands to install gpsim if you don't have root privileges
     > ./configure --disable-shared
     > make all
     > mv gpsim/gpsim ~/bin  # the executable called 'gpsim' is placed in
     >                       # a directory with the same name. Now what kind
     >                       # of idiot would do that?

HOW TO MAKE YOUR OWN gpsim DISTRIBUTION
---------------------------------------
Since gpsim uses automake, you get a whole lot of features for free. I won't go into all of them, but sometimes you might want to tweak gpsim and make your own tar ball. All you have to do is:

$ make dist

If you want to dink the rev numbers, then edit gpsim-0.x.y/configure.in and then from within gpsim-0.x.y/ :

$ automake
$ autoconf
$ ./configure 
$ make dist

INSTALLING gtk+-extra and eXdbm
-------------------------------

First, you're going to need to grab these two packages. gtk+-extra can be obtained from either its own web page or gpsim's (At the time of this writing, I do not know gtk+-extra's home page url). eXdbm, on the other hand, should be grabbed from gpsim's web page. I've fixed a bug in their install logic and changed their static Makefile to an automake type. For each of these packages, you can use the `standard' technique for installing gnu software:

$ tar -xvzf package.tar.gz
$ cd package
$ ./configure
$ make
$ su
$ make install
$ exit

Where package is either gtk+-extra or eXdbm.






